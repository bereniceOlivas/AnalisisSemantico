package automatas;

/* Generated By:JavaCC: Do not edit this line. CompilacionTokenManager.java */
import java.io.*;

/**
 * Token Manager.
 */
public class CompilacionTokenManager implements CompilacionConstants {

    /**
     * Debug output.
     */
    public static java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public static void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private static final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0xf00003ffff00L) != 0L) {
                    jjmatchedKind = 49;
                    return 1;
                }
                if ((active0 & 0x800000000L) != 0L) {
                    return 3;
                }
                return -1;
            case 1:
                if ((active0 & 0x404000L) != 0L) {
                    return 1;
                }
                if ((active0 & 0xf00003bfbf00L) != 0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 1;
                    return 1;
                }
                return -1;
            case 2:
                if ((active0 & 0x300000020000L) != 0L) {
                    return 1;
                }
                if ((active0 & 0xc00003bdbf00L) != 0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 2;
                    return 1;
                }
                return -1;
            case 3:
                if ((active0 & 0x400002098800L) != 0L) {
                    return 1;
                }
                if ((active0 & 0x800001b43700L) != 0L) {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 49;
                        jjmatchedPos = 3;
                    }
                    return 1;
                }
                return -1;
            case 4:
                if ((active0 & 0x1900000L) != 0L) {
                    return 1;
                }
                if ((active0 & 0x800000243700L) != 0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 4;
                    return 1;
                }
                return -1;
            case 5:
                if ((active0 & 0x2200L) != 0L) {
                    if (jjmatchedPos != 5) {
                        jjmatchedKind = 49;
                        jjmatchedPos = 5;
                    }
                    return 1;
                }
                if ((active0 & 0x800000241500L) != 0L) {
                    return 1;
                }
                return -1;
            case 6:
                if ((active0 & 0x2200L) != 0L) {
                    return 1;
                }
                return -1;
            default:
                return -1;
        }
    }

    private static final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    static private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    static private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 13:
                jjmatchedKind = 56;
                return jjMoveStringLiteralDfa1_0(0x200000000000000L);
            case 33:
                return jjMoveStringLiteralDfa1_0(0x20000000000L);
            case 34:
                return jjStartNfaWithStates_0(0, 35, 3);
            case 38:
                return jjMoveStringLiteralDfa1_0(0x80000000000L);
            case 40:
                return jjStopAtPos(0, 26);
            case 41:
                return jjStopAtPos(0, 27);
            case 42:
                return jjStopAtPos(0, 4);
            case 43:
                jjmatchedKind = 2;
                return jjMoveStringLiteralDfa1_0(0x40L);
            case 44:
                return jjStopAtPos(0, 33);
            case 45:
                jjmatchedKind = 3;
                return jjMoveStringLiteralDfa1_0(0x80L);
            case 46:
                return jjStopAtPos(0, 34);
            case 47:
                return jjStopAtPos(0, 5);
            case 58:
                return jjStopAtPos(0, 53);
            case 59:
                return jjStopAtPos(0, 32);
            case 60:
                jjmatchedKind = 38;
                return jjMoveStringLiteralDfa1_0(0x2000000000L);
            case 61:
                jjmatchedKind = 1;
                return jjMoveStringLiteralDfa1_0(0x1000000000L);
            case 62:
                jjmatchedKind = 40;
                return jjMoveStringLiteralDfa1_0(0x8000000000L);
            case 91:
                return jjStopAtPos(0, 30);
            case 93:
                return jjStopAtPos(0, 31);
            case 98:
                return jjMoveStringLiteralDfa1_0(0x100000L);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x400000080000L);
            case 100:
                return jjMoveStringLiteralDfa1_0(0x200000600000L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0x18000L);
            case 102:
                return jjMoveStringLiteralDfa1_0(0x20000L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x100000004000L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0x3300L);
            case 114:
                return jjMoveStringLiteralDfa1_0(0x2000000L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0x800000040400L);
            case 118:
                return jjMoveStringLiteralDfa1_0(0x800L);
            case 119:
                return jjMoveStringLiteralDfa1_0(0x1800000L);
            case 123:
                return jjStopAtPos(0, 28);
            case 124:
                return jjMoveStringLiteralDfa1_0(0x40000000000L);
            case 125:
                return jjStopAtPos(0, 29);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    static private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 10:
                if ((active0 & 0x200000000000000L) != 0L) {
                    return jjStopAtPos(1, 57);
                }
                break;
            case 38:
                if ((active0 & 0x80000000000L) != 0L) {
                    return jjStopAtPos(1, 43);
                }
                break;
            case 43:
                if ((active0 & 0x40L) != 0L) {
                    return jjStopAtPos(1, 6);
                }
                break;
            case 45:
                if ((active0 & 0x80L) != 0L) {
                    return jjStopAtPos(1, 7);
                }
                break;
            case 61:
                if ((active0 & 0x1000000000L) != 0L) {
                    return jjStopAtPos(1, 36);
                } else if ((active0 & 0x2000000000L) != 0L) {
                    return jjStopAtPos(1, 37);
                } else if ((active0 & 0x8000000000L) != 0L) {
                    return jjStopAtPos(1, 39);
                } else if ((active0 & 0x20000000000L) != 0L) {
                    return jjStopAtPos(1, 41);
                }
                break;
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x82000L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x200002200000L);
            case 102:
                if ((active0 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 14, 1);
                }
                break;
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000800000L);
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0x18000L);
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
            case 111:
                if ((active0 & 0x400000L) != 0L) {
                    return jjStartNfaWithStates_0(1, 22, 1);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x20800L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x1100200L);
            case 116:
                return jjMoveStringLiteralDfa2_0(active0, 0x800000000400L);
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x1100L);
            case 119:
                return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
            case 124:
                if ((active0 & 0x40000000000L) != 0L) {
                    return jjStopAtPos(1, 42);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    static private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(0, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0x400002000400L);
            case 98:
                return jjMoveStringLiteralDfa3_0(active0, 0x1100L);
            case 99:
                if ((active0 & 0x200000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 45, 1);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
            case 102:
                return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x1840a00L);
            case 114:
                if ((active0 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 17, 1);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x98000L);
            case 116:
                if ((active0 & 0x100000000000L) != 0L) {
                    return jjStartNfaWithStates_0(2, 44, 1);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    static private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(1, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x300000L);
            case 100:
                if ((active0 & 0x800L) != 0L) {
                    return jjStartNfaWithStates_0(3, 11, 1);
                } else if ((active0 & 0x2000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 25, 1);
                }
                break;
            case 101:
                if ((active0 & 0x8000L) != 0L) {
                    jjmatchedKind = 15;
                    jjmatchedPos = 3;
                } else if ((active0 & 0x80000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 19, 1);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
            case 105:
                return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
            case 107:
                return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
            case 108:
                return jjMoveStringLiteralDfa4_0(active0, 0x801100L);
            case 114:
                if ((active0 & 0x400000000000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 46, 1);
                }
                break;
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x1040400L);
            case 118:
                return jjMoveStringLiteralDfa4_0(active0, 0x200L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    static private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(2, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
            case 32:
                return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0x2200L);
            case 99:
                return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
            case 101:
                if ((active0 & 0x800000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 23, 1);
                } else if ((active0 & 0x1000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 24, 1);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x1500L);
            case 107:
                if ((active0 & 0x100000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 20, 1);
                }
                break;
            case 110:
                return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
            case 117:
                return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    static private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(3, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar) {
            case 99:
                if ((active0 & 0x100L) != 0L) {
                    jjmatchedKind = 8;
                    jjmatchedPos = 5;
                } else if ((active0 & 0x400L) != 0L) {
                    return jjStartNfaWithStates_0(5, 10, 1);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
            case 103:
                if ((active0 & 0x800000000000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 47, 1);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
            case 104:
                if ((active0 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 18, 1);
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
            case 108:
                if ((active0 & 0x200000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 21, 1);
                }
                break;
            case 116:
                return jjMoveStringLiteralDfa6_0(active0, 0x200L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0);
    }

    static private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(4, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch (curChar) {
            case 32:
                return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
            case 101:
                if ((active0 & 0x200L) != 0L) {
                    return jjStartNfaWithStates_0(6, 9, 1);
                } else if ((active0 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(6, 13, 1);
                }
                break;
            case 102:
                if ((active0 & 0x10000L) != 0L) {
                    return jjStopAtPos(6, 16);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(5, active0);
    }

    static private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(5, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0);
            return 7;
        }
        switch (curChar) {
            case 115:
                return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(6, active0);
    }

    static private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(6, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0);
            return 8;
        }
        switch (curChar) {
            case 116:
                return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(7, active0);
    }

    static private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(7, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0);
            return 9;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(8, active0);
    }

    static private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(8, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, active0);
            return 10;
        }
        switch (curChar) {
            case 116:
                return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(9, active0);
    }

    static private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(9, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(10, active0);
            return 11;
        }
        switch (curChar) {
            case 105:
                return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(10, active0);
    }

    static private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(10, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(11, active0);
            return 12;
        }
        switch (curChar) {
            case 99:
                return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(11, active0);
    }

    static private int jjMoveStringLiteralDfa13_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(11, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(12, active0);
            return 13;
        }
        switch (curChar) {
            case 32:
                return jjMoveStringLiteralDfa14_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(12, active0);
    }

    static private int jjMoveStringLiteralDfa14_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(12, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(13, active0);
            return 14;
        }
        switch (curChar) {
            case 118:
                return jjMoveStringLiteralDfa15_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(13, active0);
    }

    static private int jjMoveStringLiteralDfa15_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(13, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(14, active0);
            return 15;
        }
        switch (curChar) {
            case 111:
                return jjMoveStringLiteralDfa16_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(14, active0);
    }

    static private int jjMoveStringLiteralDfa16_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(14, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(15, active0);
            return 16;
        }
        switch (curChar) {
            case 105:
                return jjMoveStringLiteralDfa17_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(15, active0);
    }

    static private int jjMoveStringLiteralDfa17_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(15, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(16, active0);
            return 17;
        }
        switch (curChar) {
            case 100:
                return jjMoveStringLiteralDfa18_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(16, active0);
    }

    static private int jjMoveStringLiteralDfa18_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(16, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(17, active0);
            return 18;
        }
        switch (curChar) {
            case 32:
                return jjMoveStringLiteralDfa19_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(17, active0);
    }

    static private int jjMoveStringLiteralDfa19_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(17, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(18, active0);
            return 19;
        }
        switch (curChar) {
            case 77:
                return jjMoveStringLiteralDfa20_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(18, active0);
    }

    static private int jjMoveStringLiteralDfa20_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(18, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(19, active0);
            return 20;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa21_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(19, active0);
    }

    static private int jjMoveStringLiteralDfa21_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(19, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(20, active0);
            return 21;
        }
        switch (curChar) {
            case 105:
                return jjMoveStringLiteralDfa22_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(20, active0);
    }

    static private int jjMoveStringLiteralDfa22_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(20, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(21, active0);
            return 22;
        }
        switch (curChar) {
            case 110:
                return jjMoveStringLiteralDfa23_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(21, active0);
    }

    static private int jjMoveStringLiteralDfa23_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(21, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(22, active0);
            return 23;
        }
        switch (curChar) {
            case 40:
                return jjMoveStringLiteralDfa24_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(22, active0);
    }

    static private int jjMoveStringLiteralDfa24_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(22, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(23, active0);
            return 24;
        }
        switch (curChar) {
            case 41:
                if ((active0 & 0x1000L) != 0L) {
                    return jjStopAtPos(24, 12);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(23, active0);
    }

    static private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 14;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 48) {
                                    kind = 48;
                                }
                                jjCheckNAddStates(0, 2);
                            } else if (curChar == 39) {
                                jjstateSet[jjnewStateCnt++] = 7;
                            } else if (curChar == 34) {
                                jjstateSet[jjnewStateCnt++] = 3;
                            }
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 49) {
                                kind = 49;
                            }
                            jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 2:
                            if (curChar == 34) {
                                jjstateSet[jjnewStateCnt++] = 3;
                            }
                            break;
                        case 3:
                            if ((0x3ff000100000000L & l) != 0L) {
                                jjCheckNAddTwoStates(4, 5);
                            }
                            break;
                        case 4:
                            if ((0xfff400100000000L & l) != 0L) {
                                jjCheckNAddTwoStates(4, 5);
                            }
                            break;
                        case 5:
                            if (curChar == 34 && kind > 51) {
                                kind = 51;
                            }
                            break;
                        case 6:
                            if (curChar == 39) {
                                jjstateSet[jjnewStateCnt++] = 7;
                            }
                            break;
                        case 7:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 8;
                            }
                            break;
                        case 8:
                            if (curChar == 39 && kind > 52) {
                                kind = 52;
                            }
                            break;
                        case 9:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 48) {
                                kind = 48;
                            }
                            jjCheckNAddStates(0, 2);
                            break;
                        case 10:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 48) {
                                kind = 48;
                            }
                            jjCheckNAdd(10);
                            break;
                        case 11:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(11, 12);
                            }
                            break;
                        case 12:
                            if (curChar == 46) {
                                jjCheckNAdd(13);
                            }
                            break;
                        case 13:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 50) {
                                kind = 50;
                            }
                            jjCheckNAdd(13);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x7fffffe07fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 49) {
                                kind = 49;
                            }
                            jjCheckNAdd(1);
                            break;
                        case 1:
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 49) {
                                kind = 49;
                            }
                            jjCheckNAdd(1);
                            break;
                        case 3:
                        case 4:
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                jjCheckNAddTwoStates(4, 5);
                            }
                            break;
                        case 7:
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 8;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }
    static final int[] jjnextStates = {
        10, 11, 12,};

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
        "", "\75", "\53", "\55", "\52", "\57", "\53\53", "\55\55",
        "\160\165\142\154\151\143", "\160\162\151\166\141\164\145", "\163\164\141\164\151\143",
        "\166\157\151\144",
        "\160\165\142\154\151\143\40\163\164\141\164\151\143\40\166\157\151\144\40\115\141\151\156\50\51", "\160\141\143\153\141\147\145", "\151\146", "\145\154\163\145",
        "\145\154\163\145\40\151\146", "\146\157\162", "\163\167\151\164\143\150", "\143\141\163\145",
        "\142\162\145\141\153", "\144\145\146\141\165\154", "\144\157", "\167\150\151\154\145",
        "\167\162\151\164\145", "\162\145\141\144", "\50", "\51", "\173", "\175", "\133", "\135", "\73",
        "\54", "\56", "\42", "\75\75", "\74\75", "\74", "\76\75", "\76", "\41\75",
        "\174\174", "\46\46", "\151\156\164", "\144\145\143", "\143\150\141\162",
        "\163\164\162\151\156\147", null, null, null, null, null, "\72", null, null, null, null, null,};

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
        "DEFAULT",};
    static final long[] jjtoToken = {
        0x3fffffffffffffL,};
    static final long[] jjtoSkip = {
        0x7c0000000000000L,};
    static protected SimpleCharStream input_stream;
    static private final int[] jjrounds = new int[14];
    static private final int[] jjstateSet = new int[28];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected char curChar;

    /**
     * Constructor.
     */
    public CompilacionTokenManager(SimpleCharStream stream) {
        if (input_stream != null) {
            throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
        }
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public CompilacionTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    static public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    static private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 14; i-- > 0;) {
            jjrounds[i] = 0x80000000;
        }
    }

    /**
     * Reinitialise parser.
     */
    static public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    static public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }

    static protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    static int curLexState = 0;
    static int defaultLexState = 0;
    static int jjnewStateCnt;
    static int jjround;
    static int jjmatchedPos;
    static int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public static Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }
            image = jjimage;
            image.setLength(0);
            jjimageLen = 0;

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L) {
                    curChar = input_stream.BeginToken();
                }
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    TokenLexicalActions(matchedToken);
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else {
                    error_column++;
                }
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    static void TokenLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            case 1:
                image.append(jjstrLiteralImages[1]);
                lengthOfMatch = jjstrLiteralImages[1].length();
                System.out.println("Asignacion -> " + image);
                break;
            case 2:
                image.append(jjstrLiteralImages[2]);
                lengthOfMatch = jjstrLiteralImages[2].length();
                System.out.println("Operador -> " + image);
                break;
            case 3:
                image.append(jjstrLiteralImages[3]);
                lengthOfMatch = jjstrLiteralImages[3].length();
                System.out.println("Operador -> " + image);
                break;
            case 4:
                image.append(jjstrLiteralImages[4]);
                lengthOfMatch = jjstrLiteralImages[4].length();
                System.out.println("Operador -> " + image);
                break;
            case 5:
                image.append(jjstrLiteralImages[5]);
                lengthOfMatch = jjstrLiteralImages[5].length();
                System.out.println("Operador -> " + image);
                break;
            case 6:
                image.append(jjstrLiteralImages[6]);
                lengthOfMatch = jjstrLiteralImages[6].length();
                System.out.println("Operador -> " + image);
                break;
            case 7:
                image.append(jjstrLiteralImages[7]);
                lengthOfMatch = jjstrLiteralImages[7].length();
                System.out.println("Operador -> " + image);
                break;
            case 8:
                image.append(jjstrLiteralImages[8]);
                lengthOfMatch = jjstrLiteralImages[8].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 9:
                image.append(jjstrLiteralImages[9]);
                lengthOfMatch = jjstrLiteralImages[9].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 10:
                image.append(jjstrLiteralImages[10]);
                lengthOfMatch = jjstrLiteralImages[10].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 11:
                image.append(jjstrLiteralImages[11]);
                lengthOfMatch = jjstrLiteralImages[11].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 12:
                image.append(jjstrLiteralImages[12]);
                lengthOfMatch = jjstrLiteralImages[12].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 13:
                image.append(jjstrLiteralImages[13]);
                lengthOfMatch = jjstrLiteralImages[13].length();
                System.out.println("Palabra reservada > " + image);
                break;
            case 14:
                image.append(jjstrLiteralImages[14]);
                lengthOfMatch = jjstrLiteralImages[14].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 15:
                image.append(jjstrLiteralImages[15]);
                lengthOfMatch = jjstrLiteralImages[15].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 16:
                image.append(jjstrLiteralImages[16]);
                lengthOfMatch = jjstrLiteralImages[16].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 17:
                image.append(jjstrLiteralImages[17]);
                lengthOfMatch = jjstrLiteralImages[17].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 18:
                image.append(jjstrLiteralImages[18]);
                lengthOfMatch = jjstrLiteralImages[18].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 19:
                image.append(jjstrLiteralImages[19]);
                lengthOfMatch = jjstrLiteralImages[19].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 20:
                image.append(jjstrLiteralImages[20]);
                lengthOfMatch = jjstrLiteralImages[20].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 21:
                image.append(jjstrLiteralImages[21]);
                lengthOfMatch = jjstrLiteralImages[21].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 22:
                image.append(jjstrLiteralImages[22]);
                lengthOfMatch = jjstrLiteralImages[22].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 23:
                image.append(jjstrLiteralImages[23]);
                lengthOfMatch = jjstrLiteralImages[23].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 24:
                image.append(jjstrLiteralImages[24]);
                lengthOfMatch = jjstrLiteralImages[24].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 25:
                image.append(jjstrLiteralImages[25]);
                lengthOfMatch = jjstrLiteralImages[25].length();
                System.out.println("Palabra reservada -> " + image);
                break;
            case 26:
                image.append(jjstrLiteralImages[26]);
                lengthOfMatch = jjstrLiteralImages[26].length();
                System.out.println("Puntuacion -> " + image);
                break;
            case 27:
                image.append(jjstrLiteralImages[27]);
                lengthOfMatch = jjstrLiteralImages[27].length();
                System.out.println("Puntuacion -> " + image);
                break;
            case 28:
                image.append(jjstrLiteralImages[28]);
                lengthOfMatch = jjstrLiteralImages[28].length();
                System.out.println("Puntuacion -> " + image);
                break;
            case 29:
                image.append(jjstrLiteralImages[29]);
                lengthOfMatch = jjstrLiteralImages[29].length();
                System.out.println("Puntuacion -> " + image + "\u005cr\u005cn");
                break;
            case 30:
                image.append(jjstrLiteralImages[30]);
                lengthOfMatch = jjstrLiteralImages[30].length();
                System.out.println("Puntuacion -> " + image);
                break;
            case 31:
                image.append(jjstrLiteralImages[31]);
                lengthOfMatch = jjstrLiteralImages[31].length();
                System.out.println("Puntuacion -> " + image);
                break;
            case 32:
                image.append(jjstrLiteralImages[32]);
                lengthOfMatch = jjstrLiteralImages[32].length();
                System.out.println("Puntuacion -> " + image);
                break;
            case 33:
                image.append(jjstrLiteralImages[33]);
                lengthOfMatch = jjstrLiteralImages[33].length();
                System.out.println("Puntuacion -> " + image);
                break;
            case 34:
                image.append(jjstrLiteralImages[34]);
                lengthOfMatch = jjstrLiteralImages[34].length();
                System.out.println("Puntuacion -> " + image);
                break;
            case 35:
                image.append(jjstrLiteralImages[35]);
                lengthOfMatch = jjstrLiteralImages[35].length();
                System.out.println("Puntuacion -> " + image);
                break;
            case 36:
                image.append(jjstrLiteralImages[36]);
                lengthOfMatch = jjstrLiteralImages[36].length();
                System.out.println("Operador de validacion -> " + image);
                break;
            case 37:
                image.append(jjstrLiteralImages[37]);
                lengthOfMatch = jjstrLiteralImages[37].length();
                System.out.println("Operador de validacion -> " + image);
                break;
            case 38:
                image.append(jjstrLiteralImages[38]);
                lengthOfMatch = jjstrLiteralImages[38].length();
                System.out.println("Operador de validacion -> " + image);
                break;
            case 39:
                image.append(jjstrLiteralImages[39]);
                lengthOfMatch = jjstrLiteralImages[39].length();
                System.out.println("Operador de validacion -> " + image);
                break;
            case 40:
                image.append(jjstrLiteralImages[40]);
                lengthOfMatch = jjstrLiteralImages[40].length();
                System.out.println("Operador de validacion -> " + image);
                break;
            case 41:
                image.append(jjstrLiteralImages[41]);
                lengthOfMatch = jjstrLiteralImages[41].length();
                System.out.println("Operador de validacion -> " + image);
                break;
            case 42:
                image.append(jjstrLiteralImages[42]);
                lengthOfMatch = jjstrLiteralImages[42].length();
                System.out.println("Operador de validacion -> " + image);
                break;
            case 43:
                image.append(jjstrLiteralImages[43]);
                lengthOfMatch = jjstrLiteralImages[43].length();
                System.out.println("Operador de validacion -> " + image);
                break;
            case 44:
                image.append(jjstrLiteralImages[44]);
                lengthOfMatch = jjstrLiteralImages[44].length();
                System.out.println("Tipo de dato -> " + image);
                break;
            case 45:
                image.append(jjstrLiteralImages[45]);
                lengthOfMatch = jjstrLiteralImages[45].length();
                System.out.println("Tipo de dato -> " + image);
                break;
            case 46:
                image.append(jjstrLiteralImages[46]);
                lengthOfMatch = jjstrLiteralImages[46].length();
                System.out.println("Tipo de dato -> " + image);
                break;
            case 47:
                image.append(jjstrLiteralImages[47]);
                lengthOfMatch = jjstrLiteralImages[47].length();
                System.out.println("Tipo de dato -> " + image);
                break;
            case 48:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println("Valor -> " + image);
                break;
            case 49:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println("Identificador -> " + image);
                break;
            case 50:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println("Valor -> " + image);
                break;
            case 51:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println("cadena -> " + image);
                break;
            case 52:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println("Caracteres -> " + image);
                break;
            case 53:
                image.append(jjstrLiteralImages[53]);
                lengthOfMatch = jjstrLiteralImages[53].length();
                System.out.println("Punto doble -> " + image);
                break;
            default:
                break;
        }
    }

    static private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    static private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    static private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    static private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
